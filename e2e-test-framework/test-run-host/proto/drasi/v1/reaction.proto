syntax = "proto3";

package drasi.v1;

import "drasi/v1/common.proto";
import "google/protobuf/empty.proto";

// Reaction service for receiving query results from Drasi
service ReactionService {
    // Process a batch of query results
    rpc ProcessResults(ProcessResultsRequest) returns (ProcessResultsResponse);
    
    // Stream query results
    rpc StreamResults(stream QueryResult) returns (stream StreamResultsResponse);
    
    // Subscribe to query results (server-side streaming)
    rpc Subscribe(SubscribeRequest) returns (stream QueryResult);
    
    // Health check
    rpc HealthCheck(google.protobuf.Empty) returns (ReactionHealthCheckResponse);
}

// Request for processing results
message ProcessResultsRequest {
    QueryResult results = 1;
    map<string, string> metadata = 2; // Optional metadata
}

// Response for processing results
message ProcessResultsResponse {
    bool success = 1;
    string message = 2;
    string error = 3;
    uint32 items_processed = 4;
}

// Response for streaming results
message StreamResultsResponse {
    bool success = 1;
    string message = 2;
    string error = 3;
    uint64 batches_processed = 4;
    uint64 items_processed = 5;
}

// Subscribe to query results
message SubscribeRequest {
    repeated string query_ids = 1; // Query IDs to subscribe to
    bool include_initial_state = 2; // Whether to receive initial state
}

// Health check response
message ReactionHealthCheckResponse {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_HEALTHY = 1;
        STATUS_DEGRADED = 2;
        STATUS_UNHEALTHY = 3;
    }
    
    Status status = 1;
    string message = 2;
    string version = 3;
    uint64 pending_items = 4; // Number of items pending processing
}